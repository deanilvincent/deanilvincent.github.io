I"ß
<p>Users &amp; roles seeding in an app is an optional but one of the important tasks you should consider while building your application authentication. Instead of creating a data via your app form, using data seeding, you can directly populate data upon EF migration. This feature is called ‚ÄúModel seed data‚Äù or <a href="https://docs.microsoft.com/en-us/ef/core/modeling/data-seeding" target="_blank">‚ÄúData Seeding‚Äù</a> and it‚Äôs out since EF Core 2.1.</p>

<p>In this blog, we‚Äôre going to use this feature to seed users &amp; roles because we want our ASP.NET Core app to have its default user and role data.</p>

<h3 id="ftf-first-things-first">FTF (First Things First)</h3>

<p>Make sure you already setup your ASP.NET Core app identity models and your database context (DbContext).
In this demo, I‚Äôm using ASP.NET Core 3.0 and it‚Äôs ready for user and role seeding.</p>

<h3 id="role-seeding">Role Seeding</h3>
<p>First, let‚Äôs seed roles. Inside the <code class="highlighter-rouge">OnModelCreating</code> of your DbContext file, add this code.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>builder.Entity&lt;Role&gt;().HasData(new List&lt;Role&gt;
{
    new Role {Id = 1, Name = "Admin", NormalizedName = "ADMIN"},
    new Role {Id = 2, Name = "Staff", NormalizedName = "STAFF"},
});
</code></pre></div></div>

<p><code class="highlighter-rouge">NormalizedName</code> must always be upper case.</p>

<h3 id="user--user-role-seeding">User &amp; User Role Seeding</h3>
<p>After we create roles, then we can seed a user with a role attach to it.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var hasher = new PasswordHasher&lt;User&gt;();
builder.Entity&lt;User&gt;().HasData(new User
{
    Id = 1,
    UserName = "admin",
    NormalizedUserName = "ADMIN",
    PasswordHash = hasher.HashPassword(null, "temporarypass"),
    IsActive = true
});

builder.Entity&lt;UserRole&gt;().HasData(new UserRole
{
    RoleId = 1,
    UserId = 1
});
</code></pre></div></div>

<p>As you can see above, we called the <code class="highlighter-rouge">PasswordHasher</code> to generate an hash password of <code class="highlighter-rouge">temporarypass</code>.</p>

<h3 id="do-the-migration">Do the migration</h3>

<p>One you finish the steps above, you can now do the migrations and database update using your command line.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet ef migrations add InitialCreateToPostgreSQL

dotnet ef database update
</code></pre></div></div>

<p>That‚Äôs it. It‚Äôs very simple to setup!</p>

<p>If you have some questions or comments, please drop it below üëá :)</p>
:ET