I"=<p>Users &amp; roles seeding in an app is an optional but one of the important tasks you should consider while building your application authentication. Instead of creating a users and roles via your app form, using data seeding, you can directly populate data upon EF migration. This feature is called ‚ÄúModel seed data‚Äù or <a href="https://docs.microsoft.com/en-us/ef/core/modeling/data-seeding" target="_blank">‚ÄúData Seeding‚Äù</a> and it‚Äôs out since EF Core 2.1.</p>

<h3 id="ftf-first-things-first">FTF (First Things First)</h3>

<p>Make sure you already downloaded and installed PostgreSQL in your machine. If you haven‚Äôt installed yet, you can visit this link <a href="http://www.postgresqltutorial.com/install-postgresql/">http://www.postgresqltutorial.com/install-postgresql/</a>.</p>

<h3 id="10-install-the-package">1.0 Install the Package</h3>
<p>In this sample, I‚Äôm using ASP.NET Core Web API project but the procedure can be implemented in ASP.NET Core MVC.</p>

<p>1.1 Open the terminal and execute the command or open Nuget Package Manager. Look for this package. <code class="highlighter-rouge">Npgsql.EntityFrameworkCore.PostgreSQL</code>
<img src="https://user-images.githubusercontent.com/10904957/65769646-a274fb00-e166-11e9-9438-c85e0b8c7fbb.PNG" alt="Mark Deanil Vicente" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Install-Package Npgsql.EntityFrameworkCore.PostgreSQL
</code></pre></div></div>

<p>You can find different versions <a href="https://www.nuget.org/packages/Npgsql.EntityFrameworkCore.PostgreSQL">here</a> that fits on your .net core version.</p>

<h3 id="20-setup-connection-string">2.0 Setup connection string.</h3>

<p>Locate your the method that implements <code class="highlighter-rouge">DbContextOptionsBuilder optionsBuilder</code> and update your connection string similar to this. Normally you can find them in your Startup.cs or in your DbContext file.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>optionsBuilder.UseNpgsql(@"Server=127.0.0.1;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");
</code></pre></div></div>

<p>The example above is only a standard connection string, if you want the other options, you can find them <a href="https://www.connectionstrings.com/postgresql/">here</a>.</p>

<h3 id="30-execute-database-migrations">3.0 Execute database migrations.</h3>

<p>One you finish the steps above, you can now do the migrations and database update using your command line.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet ef migrations add InitialCreateToPostgreSQL

dotnet ef database update
</code></pre></div></div>

<p>That‚Äôs it. It‚Äôs very simple to setup!</p>

<p>If you have some questions or comments, please drop it below üëá :)</p>
:ET